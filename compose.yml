services:
  client:
    image: client:local
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - api-gateway

  downloader:
    build: ./server/database/downloader
    volumes:
      - audio-files:/audio
      - sql-files:/docker-entrypoint-initdb.d
    networks:
      - app-network

  init-db-data:
    image: alpine:latest
    depends_on: 
      downloader:
        condition: service_completed_successfully
    volumes:
      - sql-files:/docker-entrypoint-initdb.d
    command: 
      - /bin/sh
      - -c
      - |
        echo "[INIT] Waiting for /sql/02-data.sql..." &&
        while [ ! -f /docker-entrypoint-initdb.d/02-data.sql ]; do sleep 1; done

  db:
    build: ./server/database
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: audioDB
    depends_on:
      init-db-data:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - "mysql_data:/var/lib/mysql"
      - "sql-files:/docker-entrypoint-initdb.d"
    networks:
      - app-network

  api-gateway:
    build:
      context: ./server
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - streamservice
      - playlistservice
    networks:
      - app-network

  streamservice:
    build:
      context: ./server
      dockerfile: StreamService/Dockerfile
    image: server-streamservice:latest
    expose:
      - "8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATABASE_URL: jdbc:mysql://db:3306/audioDB
      SPRING_DATABASE_USERNAME: root
      SPRING_DATABASE_PASSWORD: root
      AUDIO_FILE_PATH: /audio
    volumes:
      - "audio-files:/audio"
    networks:
      - app-network

  playlistservice:
    build:
      context: ./server
      dockerfile: PlaylistService/Dockerfile
    image: server-playlistservice:latest
    expose:
      - "8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATABASE_URL: jdbc:mysql://db:3306/audioDB
      SPRING_DATABASE_USERNAME: root
      SPRING_DATABASE_PASSWORD: root
      AUDIO_FILE_PATH: /audio
    networks:
      - app-network

  genai:
    build:
      context: ./genai
      dockerfile: Dockerfile
    image: genai-service-local
    container_name: genai_service
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - app-network

  announcementservice:
    build:
      context: ./server
      dockerfile: AnnouncementService/Dockerfile
    image: server-announcementservice:latest
    expose:
      - "8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATABASE_URL: jdbc:mysql://db:3306/audioDB
      SPRING_DATABASE_USERNAME: root
      SPRING_DATABASE_PASSWORD: root
      AUDIO_FILE_PATH: /audio
    volumes:
      - audio-files:/audio
    networks:
      - app-network
      
  prometheus:
    build: ./monitoring/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - app-network

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/grafana-dashboard:/var/lib/grafana/dashboards/DevOps
      - ./monitoring/grafana/grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    environment:
      - GF_LOG_LEVEL=warn
      - GF_USERS_DEFAULT_THEME=light
      - GF_USERS_HOME_DASHBOARD_UID=beq4femso72f4a
    networks:
      - app-network

volumes:
  mysql_data:
  sql-files:
  audio-files:
  prometheus_data:

networks:
  app-network: