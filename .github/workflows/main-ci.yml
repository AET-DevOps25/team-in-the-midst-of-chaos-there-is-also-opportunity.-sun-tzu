name: Main CI Workflow

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  get-changed-files:
    runs-on: ubuntu-latest
    outputs:
      client: ${{ steps.changed-files.outputs.client_any_changed }}
      genai: ${{ steps.changed-files.outputs.genai_any_changed }}
      server: ${{ steps.changed-files.outputs.server_any_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Required for the changed-files action to compare commits
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files_yaml: |
            client:
              - 'client/**'
            genai:
              - 'genai/**'
            server:
              - 'server/**'

  test-and-build-client:
    needs: get-changed-files
    if: needs.get-changed-files.outputs.client == 'true'
    name: Test and Build Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        working-directory: ./client
        run: npm install
      - name: Run tests
        working-directory: ./client
        run: npm test -- --watch=false --browsers=ChromeHeadless
      - name: Build the application
        working-directory: ./client
        run: npm run build
      - name: Build Production Docker Image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: docker build -t client:latest -f client/Dockerfile ./client

  test-and-build-genai:
    needs: get-changed-files
    if: needs.get-changed-files.outputs.genai == 'true'
    name: Test and Build GenAI Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose
      - name: Install Python dependencies
        run: pip install -r genai/requirements.txt
      - name: Run Unit and Integration Tests with Pytest
        working-directory: ./genai
        run: pytest
      - name: Build Docker Compose services
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: docker-compose -f compose.yml up -d --build genai
      - name: Show container logs
        if: always()
        run: docker-compose -f compose.yml logs genai
      - name: Wait for GenAI service to be healthy
        run: |
          for i in {1..45}; do
            if curl -s http://localhost:8000/health | grep -q '"status":"ok"'; then
              echo "GenAI service is up!"
              exit 0
            fi
            echo "Waiting for GenAI service... ($i/45)"
            sleep 2
          done
          echo "GenAI service did not start in time."
          docker-compose -f compose.yml logs genai
          exit 1
      - name: Run Component Test (API test)
        working-directory: ./genai
        run: python tests/test_api.py
      - name: Stop services
        if: always()
        run: docker-compose -f compose.yml down
      - name: Build Production Docker Image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: docker build -t genai-service:latest -f genai/Dockerfile ./genai

  test-and-build-server:
    needs: get-changed-files
    if: needs.get-changed-files.outputs.server == 'true'
    name: Build and Test Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission to Gradle wrapper
        run: chmod +x gradlew
        working-directory: server
      - name: Build all microservices
        run: ./gradlew build --no-daemon
        working-directory: server
      - name: Run unit tests for StreamService
        run: ./gradlew :StreamService:test --no-daemon
        working-directory: server
      - name: Run unit tests for PlaylistService
        run: ./gradlew :PlaylistService:test --no-daemon
        working-directory: server
      - name: Run unit tests for AnnouncementService
        run: ./gradlew :AnnouncementService:test --no-daemon
        working-directory: server