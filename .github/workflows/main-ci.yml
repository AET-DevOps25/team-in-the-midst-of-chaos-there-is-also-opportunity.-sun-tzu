name: Main CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:


jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.setvar.outputs.timestamp }}
      is_main_merge: ${{ steps.setvar.outputs.is_main_merge }}
      owner: ${{ steps.setvar.outputs.owner }}
    steps:
      - name: Set shared metadata
        id: setvar
        run: |
          echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "is_main_merge=$([[ "$GITHUB_EVENT_NAME" == 'push' && "$GITHUB_REF" == 'refs/heads/main' ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "owner=${GITHUB_REPOSITORY_OWNER@L}" >> $GITHUB_OUTPUT


  check-changes:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      client: ${{ steps.changed-files.outputs.client_any_changed }}
      genai: ${{ steps.changed-files.outputs.genai_any_changed }}
      server: ${{ steps.changed-files.outputs.server_any_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files_yaml: |
            client:
              - 'client/**'
            genai:
              - 'genai/**'
            server:
              - 'server/**'


  test-client:
    name: Test Client
    needs: [setup, check-changes]
    if: needs.setup.outputs.is_main_merge == 'true' || needs.check-changes.outputs.client == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./client
        run: npm install

      - name: Run tests
        working-directory: ./client
        run: npm test -- --watch=false --browsers=ChromeHeadless


  test-genai:
    name: Test GenAI Service
    needs: [setup, check-changes]
    if: needs.setup.outputs.is_main_merge == 'true' || needs.check-changes.outputs.genai == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install -r genai/requirements.txt

      - name: Run Unit and Integration Tests with Pytest
        working-directory: ./genai
        run: pytest --ignore=tests/test_api.py

      - name: Build Docker Compose services
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          BASIC_AUTH_PASS: ${{ secrets.BASIC_AUTH_PASS }}
        run: docker compose up -d --build genai-service

      - name: Show container logs
        if: always()
        run: docker compose logs genai-service

      - name: Wait for GenAI service to be healthy
        run: |
          for i in {1..45}; do
            if curl -s http://localhost:8000/health | grep -q '"status":"ok"'; then
              echo "GenAI service is up!"
              exit 0
            fi
            echo "Waiting for GenAI service... ($i/45)"
            sleep 2
          done
          echo "GenAI service did not start in time."
          docker compose logs genai-service
          exit 1

      - name: Run Component Test (API test)
        working-directory: ./genai
        run: python tests/test_api.py

      - name: Stop services
        if: always()
        run: docker compose down


  test-server:
    name: Test Server
    needs: [setup, check-changes]
    if: needs.setup.outputs.is_main_merge == 'true' || needs.check-changes.outputs.server == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew
        working-directory: server

      - name: Build all microservices
        run: ./gradlew build --no-daemon
        working-directory: server

      - name: Run unit tests for all services
        run: ./gradlew test --no-daemon
        working-directory: server


  build:
    needs: [setup, test-client, test-server, test-genai]
    if: needs.setup.outputs.is_main_merge == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [client, downloader, db, api-gateway, stream-service, playlist-service, genai-service, announcement-service, prometheus]
    env:
      LOCAL_IMAGE: aifm/${{ matrix.service }}
      REMOTE_IMAGE: ghcr.io/${{ needs.setup.outputs.owner }}/aifm/${{ matrix.service }}
      IMAGE_ARTIFACT: ${{ matrix.service }}-image
      IMAGE_TIMESTAMP: ${{ needs.setup.outputs.timestamp }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build image
        run: docker compose build ${{ matrix.service }}

      - name: Determine remote image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REMOTE_IMAGE }}
          tags: |
            type=sha
            type=raw,value=${{ github.run_id }}-${{ github.run_attempt }}
            type=raw,value=${{ env.IMAGE_TIMESTAMP }}
            type=raw,value=latest

      - name: Create remote image tags
        run: |
          while IFS= read -r tag; do
            echo Creating tag $tag
            docker tag ${{ env.LOCAL_IMAGE }}:local $tag
          done <<< "${{ steps.meta.outputs.tags }}"

      - name: Store all remote image tags
        run: docker save ${{ env.REMOTE_IMAGE }} > /tmp/${{ env.IMAGE_ARTIFACT }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_ARTIFACT }}
          path: /tmp/${{ env.IMAGE_ARTIFACT }}.tar


  push:
    needs: [setup, build]
    if: needs.setup.outputs.is_main_merge == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [client, downloader, db, api-gateway, stream-service, playlist-service, genai-service, announcement-service, prometheus]
    env:
      REMOTE_IMAGE: ghcr.io/${{ needs.setup.outputs.owner }}/aifm/${{ matrix.service }}
      IMAGE_ARTIFACT: ${{ matrix.service }}-image

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_ARTIFACT }}
          path: /tmp

      - name: Load all remote image tags
        run: |
          docker load < /tmp/${{ env.IMAGE_ARTIFACT }}.tar
          docker image ls -a

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to registry
        run: docker push --all-tags ${{ env.REMOTE_IMAGE }}

      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ env.IMAGE_ARTIFACT }}


  deploy-aet-cit:
    name: Deploy to AET CIT Kubernetes cluster (Rancher)
    needs: push
    runs-on: ubuntu-latest
    if: needs.setup.outputs.is_main_merge == 'true'
    environment:
      name: AET CIT
      url: 'https://aifm.student.k8s.aet.cit.tum.de'

    steps:
      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.AET_CIT_KUBECONFIG_BASE64 }}" | base64 -d > $HOME/.kube/config

      - name: Set namespace
        run: kubectl config set-context --current --namespace=aifm

      - name: Checkout manifests
        uses: actions/checkout@v4
        with:
          sparse-checkout: k8s

      - name: Apply manifest changes to cluster
        run: kubectl apply -f k8s

      - name: Apply secrets to cluster
        run: |
          kubectl create secret generic project-secrets \
            --from-literal=DOWNLOAD_PASS=${{ secrets.DOWNLOAD_PASS }} \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Restart deployments to trigger image refetch
        run: kubectl rollout restart deployment


  deploy-aws:
    name: Deploy to AWS EC2
    needs: push
    runs-on: ubuntu-latest
    if: needs.setup.outputs.is_main_merge == 'true'
    environment:
      name: AWS
      url: 'https://aifm.dotan.de'

    steps:
      - name: Checkout compose.yml
        uses: actions/checkout@v4
        with:
          sparse-checkout: compose.yml

      - name: Activate HTTPS Reverse Proxy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ vars.AWS_EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            cd nginx-proxy-manager
            docker compose up -d

      - name: Copy compose.yml
        uses: appleboy/scp-action@v1
        with:
          host: ${{ vars.AWS_EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: "./compose.yml"
          target: aifm

      - name: Create .env
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ vars.AWS_EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            cd aifm
            : > .env
            echo "DOWNLOAD_PASS=${{ secrets.DOWNLOAD_PASS }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "URL=https://aifm.dotan.de" >> .env

      - name: Start docker compose
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ vars.AWS_EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            cd aifm
            docker compose up -d --pull always
